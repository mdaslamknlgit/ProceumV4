 ; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "EduDrive"
#define MyAppVersion "6.0.0"
#define MyAppPublisher "EduDrive"
#define MyAppURL ""
#define MyAppExeName "Student.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{C10182B7-8EAD-426D-BE23-DCE64711C0EC}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=yes
OutputDir=E:\GIT\EduDrive\EduDriveWinForms\EduDriveWinForms\bin\Admin\ClientSetup
Compression=lzma
SolidCompression=yes
SetupIconFile=E:\GIT\EduDrive\EduDriveWinForms\EduDriveWinForms\Resources\software-installer.ico
UninstallDisplayIcon={app}\company.ico
UninstallDisplayName=e-Learning App
VersionInfoVersion=4.0.0
OutputBaseFilename=setup  
DisableWelcomePage=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"

[Files]       
Source: "{src}\edudrive\company.dll"; DestDir: "{app}"; Flags: external ignoreversion; Permissions: users-full
Source: "{src}\edudrive\company.ico"; DestDir: "{app}"; Flags: external ignoreversion
Source: "..\bin\Support\Support_protected.exe"; DestDir: "{app}"; DestName: "Support.exe"; Flags: ignoreversion
Source: "..\..\..\SupportFiles\dotNetFx40_Full_x86_x64.exe"; DestDir: "{app}\deps"; Flags: ignoreversion;
Source: "..\..\..\SupportFiles\NDP40-KB2468871-v2-x64.exe"; DestDir: "{app}\deps"; Flags: ignoreversion
Source: "..\..\..\SupportFiles\NDP40-KB2468871-v2-x86.exe"; DestDir: "{app}\deps"; Flags: ignoreversion    
Source: "..\bin\Customer\Student_protected.exe"; DestDir: "{app}"; DestName: "Student.exe"; Flags: ignoreversion; AfterInstall: InstallFramework

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\company.ico"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\company.ico"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Dirs]
Name: "{app}\data"; Flags: uninsalwaysuninstall; Permissions: users-full

[Messages]
english.WelcomeLabel2=**WARNING**%nDue to advance security used in this software, your antivirus may not allow it to execute. In such case, please disable your antivirus and reinstall this software again.%n%nBe assured that this software is 100% safe. We are working with antivirus companies to remove this FALSE POSITIVE.
english.WelcomeLabel1=Welcome to the [name]

[Code]
procedure InstallFramework;
var
  StatusText: string;
  var
  ResultCode: Integer;
begin

  if not RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full') then

  begin
    StatusText := WizardForm.StatusLabel.Caption;
    WizardForm.StatusLabel.Caption := 'Installing .NET framework v4.0...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    try
      // here put the .NET setup execution code        

    if not Exec(ExpandConstant('{app}\deps\dotNetFx40_Full_x86_x64.exe'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      // you can interact with the user that the installation failed
      MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.',
        mbError, MB_OK);
    end;

    if IsWin64 then
      Exec(ExpandConstant('{app}\deps\NDP40-KB2468871-v2-x64.exe'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode)
    else
      Exec(ExpandConstant('{app}\deps\NDP40-KB2468871-v2-x86.exe'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode)
   
    finally
      WizardForm.StatusLabel.Caption := StatusText;
      WizardForm.ProgressGauge.Style := npbstNormal;
    end;
  end;
 end;
